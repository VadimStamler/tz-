# -*- coding: utf-8 -*-
"""Task3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1x8pj2P4HQ4X_zqIOXJO8QFA1gnK5Pxc8
"""

per1 = input('Введите путь к файлу tests.json: ')
per2 = input('Введите путь к файлу values.json: ')

import json
with open(per1) as fh:
  data_tests = json.loads(fh.read())

# print(data_tests)

import json
with open(per2) as fh:
  data_values = json.loads(fh.read())

# print(data_values)



# Независимо от того, где находится "id" (ключ) в JSON, эта функция возвращает каждое значение для экземпляра "key". obj- словарь 
def json_extract(obj, key):
    """Recursively fetch values from nested JSON."""
    arr = []

    def extract(obj, arr, key):
        """Recursively search for values of key in JSON tree."""
        if isinstance(obj, dict):
            for k, v in obj.items():
                if isinstance(v, (dict, list)):
                    extract(v, arr, key)
                elif k == key:
                    arr.append(v)
        elif isinstance(obj, list):
            for item in obj:
                extract(item, arr, key)
        return arr

    values = extract(obj, arr, key)
    return values

list_of_id = list(json_extract(data_values, 'id'))
list_of_marks = list(json_extract(data_values, 'value'))
# print(list_of_id)
# print(list_of_marks)


# Независимо от того, где находится ключ "текст" в JSON, эта функция возвращает каждое значение для экземпляра "key". obj- словарь 
def json_extract(obj, key):
    """Recursively fetch values from nested JSON."""
    arr = []

    def extract(obj, arr, key):
        """Recursively search for values of key in JSON tree."""
        if isinstance(obj, dict):
            for k, v in obj.items():
                if isinstance(v, (dict, list)):
                    extract(v, arr, key)
                elif k == key:
                  if v in list_of_id: 
                    obj['value'] = list_of_marks[list_of_id.index(v)]
                  # else:
                  #   continue 
                  # arr.append(v)
        elif isinstance(obj, list):
            for item in obj:
                extract(item, arr, key)
        return arr

    values = extract(obj, arr, key)
    return values

data_end = json_extract(data_tests, 'id')
# print(data_end )
# print(data_tests)
with open('report.json', 'w') as outfile:
    json.dump(data_tests, outfile)